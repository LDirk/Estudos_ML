# -*- coding: utf-8 -*-
"""Porco_Cachorro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xLkpEAqpKbgeEqOi1WEtDNtzga48oUBI
"""

# 1 para porco, 0 para cachorro 
# Features (Características)

# 0 para NÃO e 1 para Sim

# Features (Características)
# PeloLongo?, PernaCurta?, Late? 

porco1 = [0,1,0]
porco2 = [0,1,1]
porco3 = [1,1,0]

cachorro1 = [0,1,1]
cachorro2 = [1,0,1]
cachorro3 = [1,1,1] 

# f(x) = y
treino_x = [porco1, porco2, porco3, cachorro1, cachorro2, cachorro3]
treino_y = [1,1,1,0,0,0] # Labels

from sklearn.svm import LinearSVC

model = LinearSVC()
model.fit(treino_x, treino_y)

animal_misterioso = [1,1,1]
model.predict([animal_misterioso]) #Retornou 0 (cachorro)

misterio1 = [1,1,1] # Retornou 0, (Cachorro)
misterio2 = [1,1,0] # Retornou 1, (porco)
misterio3 = [0,1,1] # Retornou 0, (Cachorro)

teste_x = [misterio1, misterio2, misterio3] 
previsoes = model.predict(teste_x)

teste_y = [0,1,1] # Classe real.

corretos = (previsoes == teste_y).sum() # Retorna o numero de verdadeiros

total = len(teste_x) # Tamanho dos testes 

taxa_de_acertos = corretos/total 

print("Taxa de acerto: ", taxa_de_acertos*100)

from sklearn.metrics import  accuracy_score # Função para calcular taxa de acerto

taxa_de_acertos = accuracy_score(teste_y, previsoes)
print("Taxa de acerto", taxa_de_acertos * 100)